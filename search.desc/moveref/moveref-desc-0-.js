searchState.loadedDescShard("moveref", 0, "Types and traits for C++ style placement initialization …\nDerefencing move operations for <code>MoveRef</code>.\nThe storage should drop its referent.\nOperations for constructing <code>New</code> values into a <code>Self::Output</code> …\nA trait for transforming a <code>Deref</code> type into a pinned <code>MoveRef</code>…\nThe storage should not drop its referent.\nA “reference” type which <em>uniquely</em> owns its referent …\nBacking storage for a <code>MoveRef</code>.\nType used for constructing the storage for a <code>Slot</code> backing …\nKind dictacting whether the storage should drop its …\nMacro for binding a variable to a fresh <code>MoveRef</code>.\nMacro for binding a variable to a fresh <code>Slot</code> for storage …\nConstruct a <code>MoveRef</code> by dereferencing <code>self</code> and moving its …\nConstruct a <code>New</code> value into a fresh <code>Self::Output</code> instance.\nConstruct a <code>New</code> value into a fresh <code>Self::Output</code> instance.\nConstruct and pin <code>new</code> into the slot and return the …\nMacro for creating a fresh <code>MoveRef</code> expression.\nMacro for creating a fresh <code>Slot</code> expression.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsume <code>self</code> and create a pinned <code>MoveRef</code> with <code>self</code>’s …\nTransform a <code>MoveRef&lt;T&gt;</code> into a <code>Pin&lt;MoveRef&lt;T&gt;&gt;</code>. This is …\nConstruction operations.\nConstruct a new <code>SlotStorage&lt;T&gt;</code> given a <code>kind</code>.\nMove and pin <code>val</code> into the slot and return the associated …\nMove <code>val</code> into the slot and return the associated owning …\nConsume a <code>Pin&lt;Self&gt;</code> and return a raw <code>*mut T</code>. This …\nProject the <code>Slot</code> for the storage.\nTry to construct a <code>New</code> value into a fresh <code>Self::Output</code> …\nTry to construct and pin <code>new</code> into the slot and return the …\nTypes which can be copy-constructed from an existing value …\nTypes which can be move-constructed from an existing value …\nTypes which can be constructed (initialized) into some …\nTypes which can be constructed (initialized) into some …\nConstructs a <code>New</code> value using a value-producing thunk <code>f</code>.\nConstructs a <code>New</code> value using a thunk which initializes its …\nSafety\nConstructs a <code>New</code> value for a type <code>T</code> using it’s default …\nConstructs a <code>New</code> value from a <em>uniquely</em> owning pointer <code>P</code> by …\nSafety\nInitialize <code>Self</code> using <code>this</code> for storage.\nConstructs a <code>New</code> value using a given value <code>val</code>.\nTry to initialize <code>Self</code> using <code>this</code> for storage.")